{"version":3,"sources":["components/Carousel.tsx","App.tsx","services/utils.ts","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","amount","length","useState","position","setPosition","isLastImage","setIsLastImage","isFirstImage","setIsFirstImage","lastIndex","handleNextClick","currentPosition","timeoutId","className","style","width","map","image","transform","transition","src","alt","type","onClick","firstIndex","disabled","window","setTimeout","animation","clearTimeout","defaultCarouselParameters","getImagesUrls","from","to","numbers","n","push","getNumbers","App","carouselParameters","setCarouselParameters","isInfinite","setIsInfinite","handleFieldChange","event","target","name","value","htmlFor","id","onChange","min","max","checked","ReactDOM","render","document","getElementById"],"mappings":"kQAaaA,EAA4B,SAAC,GAOnC,IANLC,EAMI,EANJA,OACAC,EAKI,EALJA,KACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,kBACAC,EACI,EADJA,SAEMC,EAASN,EAAOO,OAEtB,EAAgCC,mBAAS,GAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAsCF,oBAAS,GAA/C,mBAAOG,EAAP,KAAoBC,EAApB,KACA,EAAwCJ,oBAAkBH,GAA1D,mBAAOQ,EAAP,KAAqBC,EAArB,KAEIC,EAAY,EAEVC,EAAkB,WACtBN,GAAY,SAACO,GAKX,OAJAH,GAAgB,IAEhBC,GAAaE,EAAkBd,EAAYD,EAAY,KAEpCI,EAAS,GAAMD,EACzBY,EAAkBd,GAAaG,EAASJ,GAG7Ca,EAAYd,GAAQK,EAAS,GAC/BM,GAAwBP,GAEjBY,EAAkBd,GAAaG,EAAS,EAAIS,IAG9CE,EAAkBd,EAAYF,MAwBrCiB,EAAY,EAehB,OACE,sBAAKC,UAAU,WAAf,UACE,qBACEA,UAAU,oBACVC,MAAO,CACLC,MAAM,GAAD,OAAKlB,EAAYD,EAAjB,OAHT,SAME,oBACEiB,UAAU,iBACVC,MAAO,CACLC,MAAM,GAAD,OAAKlB,EAAYG,EAAjB,OAHT,SAMGN,EAAOsB,KAAI,SAACC,GACX,OACE,oBAEEJ,UAAU,iBACVC,MAAO,CACLI,UAAU,cAAD,OAAgBf,EAAhB,OACTgB,WAAW,aAAD,OAAerB,EAAoB,IAAnC,MALd,SAQE,qBACEsB,IAAKH,EACLI,IAAKJ,EACLF,MAAOlB,KAVJoB,UAkBf,sBAAKJ,UAAU,yBAAf,UACE,wBACES,KAAK,SACLT,UAAU,0CACVU,QA1EgB,WACtBnB,GAAY,SAACO,GACXL,GAAe,GAEf,IAAMkB,GAAcb,EAAkBd,EAEtC,OAAK2B,GAAczB,EACVY,EAAkBd,GAAaG,EAASJ,GAG7C4B,EAAa7B,GAAQ,GACvBa,GAAyBT,GAElBY,EAAkBd,EAAY2B,GAGhCb,EAAkBd,EAAYF,MA2DjC8B,SAAUlB,EAJZ,oBASA,wBACE,UAAQ,OACRe,KAAK,SACLT,UAAU,0CACVU,QAASb,EACTe,SAAUpB,EALZ,uBAWF,qBAAKQ,UAAU,mBAAf,SACE,wBACES,KAAK,SACLT,UAAU,2CACVU,QAzEe,WACrBX,EAAYc,OAAOC,YAAW,SAASC,IACrCC,aAAajB,GACbF,IAEAE,EAAYc,OAAOC,WAAWC,EAAW9B,GAErCW,EAAYd,GAAQK,EAAS,IAAMD,GACrC8B,aAAajB,KAEdd,IA4DC,kCCrIFgC,EAAgD,CACpDnC,KAAM,EACNC,UAAW,EACXC,UAAW,IACXC,kBAAmB,KAGfiC,ECfoB,SAACC,EAAcC,GAGvC,IAFA,IAAMC,EAAU,GAEPC,EAAIH,EAAMG,GAAKF,EAAIE,GAAK,EAC/BD,EAAQE,KAAKD,GAGf,OAAOD,EDQaG,CAAW,EAAG,IACjCrB,KAAI,SAAAmB,GAAC,sBAAaA,EAAb,WAEKG,EAAgB,WAC3B,MACEpC,mBAAQ,eAA0B4B,IADpC,mBAAOS,EAAP,KAA2BC,EAA3B,KAGA,EAAoCtC,oBAAS,GAA7C,mBAAOuC,EAAP,KAAmBC,EAAnB,KAEMhD,EAASqC,EAETY,EAAoB,SAACC,GACzB,MAAwBA,EAAMC,OAAtBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEdP,EAAsB,2BACjBD,GADgB,kBAElBO,GAAQC,MAQb,OACE,sBAAKlC,UAAU,MAAf,UACE,oBAAI,UAAQ,QAAZ,iCACoBnB,EAAOO,OAD3B,aAIA,sBAAKY,UAAU,cAAf,UACE,wBAAOmC,QAAQ,SAAf,8CAEE,uBACEC,GAAG,SACHH,KAAK,YACLxB,KAAK,SACLyB,MAAOR,EAAmB1C,UAC1BqD,SAAUP,OAId,wBAAOK,QAAQ,UAAf,oDAEE,uBACEC,GAAG,UACHH,KAAK,YACLxB,KAAK,SACLyB,MAAOR,EAAmB3C,UAC1BuD,IAAI,IACJC,IAAI,KACJF,SAAUP,OAId,wBAAOK,QAAQ,SAAf,qDAEE,uBACEC,GAAG,SACHH,KAAK,OACLxB,KAAK,SACLyB,MAAOR,EAAmB5C,KAC1BwD,IAAI,IACJC,IAAI,KACJF,SAAUP,OAId,iFAEE,uBACEG,KAAK,oBACLxB,KAAK,SACLyB,MAAOR,EAAmBzC,kBAC1BoD,SAAUP,OAId,4EAEE,uBACEG,KAAK,WACLxB,KAAK,WACL+B,QAASZ,EACTS,SAhEmB,WAC3BR,GAAeD,YAoEb,cAAC,EAAD,CACE/C,OAAQA,EACRC,KAAM4C,EAAmB5C,KACzBC,UAAW2C,EAAmB3C,UAC9BC,UAAW0C,EAAmB1C,UAC9BC,kBAAmByC,EAAmBzC,kBACtCC,SAAU0C,QE3GlBa,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.06de765c.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\nexport const Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const amount = images.length;\n\n  const [position, setPosition] = useState(0);\n  const [isLastImage, setIsLastImage] = useState(false);\n  const [isFirstImage, setIsFirstImage] = useState(true && !infinite);\n\n  let lastIndex = 0;\n\n  const handleNextClick = () => {\n    setPosition((currentPosition) => {\n      setIsFirstImage(false);\n\n      lastIndex = -currentPosition / itemWidth + frameSize - 1;\n\n      if ((lastIndex === amount - 1) && infinite) {\n        return currentPosition + itemWidth * (amount - frameSize);\n      }\n\n      if (lastIndex + step >= amount - 1) {\n        setIsLastImage(true && !infinite);\n\n        return currentPosition - itemWidth * (amount - 1 - lastIndex);\n      }\n\n      return currentPosition - itemWidth * step;\n    });\n  };\n\n  const handlePrevClick = () => {\n    setPosition((currentPosition) => {\n      setIsLastImage(false);\n\n      const firstIndex = -currentPosition / itemWidth;\n\n      if (!firstIndex && infinite) {\n        return currentPosition - itemWidth * (amount - frameSize);\n      }\n\n      if (firstIndex - step <= 0) {\n        setIsFirstImage(true && !infinite);\n\n        return currentPosition + itemWidth * firstIndex;\n      }\n\n      return currentPosition + itemWidth * step;\n    });\n  };\n\n  let timeoutId = 0;\n\n  const startCarousel = (() => {\n    timeoutId = window.setTimeout(function animation() {\n      clearTimeout(timeoutId);\n      handleNextClick();\n\n      timeoutId = window.setTimeout(animation, animationDuration);\n\n      if (lastIndex + step >= amount - 1 && !infinite) {\n        clearTimeout(timeoutId);\n      }\n    }, animationDuration);\n  });\n\n  return (\n    <div className=\"Carousel\">\n      <div\n        className=\"Carousel__wrapper\"\n        style={{\n          width: `${itemWidth * frameSize}px`,\n        }}\n      >\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            width: `${itemWidth * amount}px`,\n          }}\n        >\n          {images.map((image) => {\n            return (\n              <li\n                key={image}\n                className=\"Carousel__item\"\n                style={{\n                  transform: `translateX(${position}px)`,\n                  transition: `transform ${animationDuration / 1000}s`,\n                }}\n              >\n                <img\n                  src={image}\n                  alt={image}\n                  width={itemWidth}\n                />\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n\n      <div className=\"Carousel__move-buttons\">\n        <button\n          type=\"button\"\n          className=\"Carousel__button Carousel__button--prev\"\n          onClick={handlePrevClick}\n          disabled={isFirstImage}\n        >\n          &#8592;\n        </button>\n\n        <button\n          data-cy=\"next\"\n          type=\"button\"\n          className=\"Carousel__button Carousel__button--next\"\n          onClick={handleNextClick}\n          disabled={isLastImage}\n        >\n          &#8594;\n        </button>\n      </div>\n\n      <div className=\"Carousel__bottom\">\n        <button\n          type=\"button\"\n          className=\"Carousel__button Carousel__button--start\"\n          onClick={startCarousel}\n        >\n          Start Carousel\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport './App.scss';\nimport './services/reset.scss';\nimport { Carousel } from './components/Carousel';\nimport { CarouselParameters } from './types/CarouselParameters';\nimport { getNumbers } from './services/utils';\n\nconst defaultCarouselParameters: CarouselParameters = {\n  step: 3,\n  frameSize: 3,\n  itemWidth: 130,\n  animationDuration: 1000,\n};\n\nconst getImagesUrls = getNumbers(1, 10)\n  .map(n => `./img/${n}.png`);\n\nexport const App: React.FC = () => {\n  const [carouselParameters, setCarouselParameters] = (\n    useState<CarouselParameters>({ ...defaultCarouselParameters })\n  );\n  const [isInfinite, setIsInfinite] = useState(false);\n\n  const images = getImagesUrls;\n\n  const handleFieldChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = event.target;\n\n    setCarouselParameters({\n      ...carouselParameters,\n      [name]: +value,\n    });\n  };\n\n  const handleInfiniteChange = () => {\n    setIsInfinite(!isInfinite);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 data-cy=\"title\">\n        {`Carousel with ${images.length} images`}\n      </h1>\n\n      <div className=\"App__inputs\">\n        <label htmlFor=\"itemId\">\n          Enter image width in px: &nbsp;&nbsp;\n          <input\n            id=\"itemId\"\n            name=\"itemWidth\"\n            type=\"number\"\n            value={carouselParameters.itemWidth}\n            onChange={handleFieldChange}\n          />\n        </label>\n\n        <label htmlFor=\"frameId\">\n          Enter number of images on page:&nbsp;&nbsp;\n          <input\n            id=\"frameId\"\n            name=\"frameSize\"\n            type=\"number\"\n            value={carouselParameters.frameSize}\n            min=\"1\"\n            max=\"10\"\n            onChange={handleFieldChange}\n          />\n        </label>\n\n        <label htmlFor=\"stepId\">\n          Enter number of images scrolled:&nbsp;&nbsp;\n          <input\n            id=\"stepId\"\n            name=\"step\"\n            type=\"number\"\n            value={carouselParameters.step}\n            min=\"1\"\n            max=\"10\"\n            onChange={handleFieldChange}\n          />\n        </label>\n\n        <label>\n          Enter animation duration time in ms:&nbsp;&nbsp;\n          <input\n            name=\"animationDuration\"\n            type=\"number\"\n            value={carouselParameters.animationDuration}\n            onChange={handleFieldChange}\n          />\n        </label>\n\n        <label>\n          Do you want infinite scrolling?&nbsp;&nbsp;\n          <input\n            name=\"infinite\"\n            type=\"checkbox\"\n            checked={isInfinite}\n            onChange={handleInfiniteChange}\n          />\n        </label>\n      </div>\n\n      <Carousel\n        images={images}\n        step={carouselParameters.step}\n        frameSize={carouselParameters.frameSize}\n        itemWidth={carouselParameters.itemWidth}\n        animationDuration={carouselParameters.animationDuration}\n        infinite={isInfinite}\n      />\n    </div>\n  );\n};\n","export const getNumbers = (from: number, to: number): number[] => {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}