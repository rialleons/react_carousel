{"version":3,"sources":["components/Carousel.tsx","App.tsx","services/utils.ts","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","amount","length","useState","rotatedImages","setRotatedImages","startIndex","replace","endIndex","isFirstImage","isLastImage","scrollLogic","slice","timeoutId","useMemo","window","setTimeout","className","map","image","index","isShown","style","display","src","alt","width","type","onClick","clearTimeout","disabled","defaultCarouselParameters","getImagesUrls","from","to","numbers","n","push","getNumbers","App","carouselParameters","setCarouselParameters","isInfinite","setIsInfinite","handleFieldChange","event","target","name","value","htmlFor","id","onChange","min","max","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.be3a5161.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react';\n\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\nexport const Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const amount = images.length;\n\n  const [rotatedImages, setRotatedImages] = useState([...images]);\n\n  const startIndex = +rotatedImages[0].replace(/\\D/g, '') - 1;\n\n  const endIndex = startIndex + frameSize - 1;\n\n  const isFirstImage = !infinite\n    ? startIndex === 0\n    : false;\n\n  const isLastImage = !infinite\n    ? endIndex === amount - 1\n    : false;\n\n  const scrollLogic = () => {\n    if (endIndex + frameSize >= amount && !infinite) {\n      setRotatedImages([\n        ...rotatedImages.slice(amount - endIndex - 1, amount),\n        ...rotatedImages.slice(0, amount - endIndex - 1),\n      ]);\n    } else {\n      setRotatedImages([\n        ...rotatedImages.slice(step, amount),\n        ...rotatedImages.slice(0, step),\n      ]);\n    }\n  };\n\n  let timeoutId = 0;\n\n  useMemo(() => {\n    timeoutId = window.setTimeout(scrollLogic, animationDuration);\n  }, [endIndex]);\n\n  const handlePrevClick = () => {\n    clearTimeout(timeoutId);\n\n    if (startIndex - step <= 0 && !infinite) {\n      setRotatedImages([\n        ...rotatedImages.slice(\n          amount - startIndex, amount,\n        ),\n        ...rotatedImages.slice(0, amount - startIndex),\n      ]);\n    } else {\n      setRotatedImages([\n        ...rotatedImages.slice(amount - step, amount),\n        ...rotatedImages.slice(0, amount - step),\n      ]);\n    }\n  };\n\n  const handleNextClick = () => {\n    clearTimeout(timeoutId);\n    scrollLogic();\n  };\n\n  return (\n    <div className=\"Carousel\">\n      <ul className=\"Carousel__list\">\n        {rotatedImages.map((image, index) => {\n          const isShown = (index < frameSize);\n\n          return (\n            <li\n              key={image}\n              className=\"Carousel__item\"\n              style={{\n                display: isShown ? 'block' : 'none',\n              }}\n            >\n              <img\n                src={image}\n                alt={image}\n                width={itemWidth}\n              />\n            </li>\n          );\n        })}\n      </ul>\n\n      <div className=\"Carousel__buttons\">\n        <button\n          type=\"button\"\n          className=\"Carousel__button Carousel__button--prev\"\n          onClick={handlePrevClick}\n          disabled={isFirstImage}\n        >\n          &#8592;\n        </button>\n\n        <button\n          data-cy=\"next\"\n          type=\"button\"\n          className=\"Carousel__button Carousel__button--next\"\n          onClick={handleNextClick}\n          disabled={isLastImage}\n        >\n          &#8594;\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport './App.scss';\nimport './services/reset.scss';\nimport { Carousel } from './components/Carousel';\nimport { CarouselParameters } from './types/CarouselParameters';\nimport { getNumbers } from './services/utils';\n\nconst defaultCarouselParameters:CarouselParameters = {\n  step: 3,\n  frameSize: 3,\n  itemWidth: 130,\n  animationDuration: 1000,\n};\n\nconst getImagesUrls = getNumbers(1, 10)\n  .map(n => `./img/${n}.png`);\n\nexport const App: React.FC = () => {\n  const [carouselParameters, setCarouselParameters] = (\n    useState<CarouselParameters>({ ...defaultCarouselParameters })\n  );\n  const [isInfinite, setIsInfinite] = useState(false);\n\n  const images = getImagesUrls;\n\n  const handleFieldChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCarouselParameters({\n      ...carouselParameters,\n      [event.target.name]: +event.target.value,\n    });\n  };\n\n  const handleInfiniteChange = () => {\n    setIsInfinite(!isInfinite);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 data-cy=\"title\">\n        {`Carousel with ${images.length} images`}\n      </h1>\n\n      <div className=\"App__inputs\">\n        <label htmlFor=\"itemId\">\n          Enter image width in px: &nbsp;&nbsp;\n          <input\n            id=\"itemId\"\n            name=\"itemWidth\"\n            type=\"number\"\n            value={carouselParameters.itemWidth}\n            onChange={handleFieldChange}\n          />\n        </label>\n\n        <label htmlFor=\"frameId\">\n          Enter number of images on page:&nbsp;&nbsp;\n          <input\n            id=\"frameId\"\n            name=\"frameSize\"\n            type=\"number\"\n            value={carouselParameters.frameSize}\n            min=\"1\"\n            max=\"10\"\n            onChange={handleFieldChange}\n          />\n        </label>\n\n        <label htmlFor=\"stepId\">\n          Enter number of images scrolled:&nbsp;&nbsp;\n          <input\n            id=\"stepId\"\n            name=\"step\"\n            type=\"number\"\n            value={carouselParameters.step}\n            min=\"1\"\n            max=\"10\"\n            onChange={handleFieldChange}\n          />\n        </label>\n\n        <label>\n          Enter animation duration time in ms:&nbsp;&nbsp;\n          <input\n            name=\"animationDuration\"\n            type=\"number\"\n            value={carouselParameters.animationDuration}\n            onChange={handleFieldChange}\n          />\n        </label>\n\n        <label>\n          Do you want infinite scrolling?&nbsp;&nbsp;\n          <input\n            name=\"infinite\"\n            type=\"checkbox\"\n            checked={isInfinite}\n            onChange={handleInfiniteChange}\n          />\n        </label>\n      </div>\n\n      <Carousel\n        images={images}\n        step={carouselParameters.step}\n        frameSize={carouselParameters.frameSize}\n        itemWidth={carouselParameters.itemWidth}\n        animationDuration={carouselParameters.animationDuration}\n        infinite={isInfinite}\n      />\n    </div>\n  );\n};\n","export const getNumbers = (from: number, to: number): number[] => {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}