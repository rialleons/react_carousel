{"version":3,"sources":["components/Carousel.tsx","App.tsx","services/utils.ts","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","infinite","amount","length","useState","rotatedImages","setRotatedImages","startIndex","replace","endIndex","isFirstImage","isLastImage","handleNextClick","currentImages","slice","timeoutId","startCarousel","useCallback","window","setTimeout","animation","clearTimeout","className","map","image","index","isShown","style","display","src","alt","width","type","onClick","disabled","defaultCarouselParameters","getImagesUrls","from","to","numbers","n","push","getNumbers","App","carouselParameters","setCarouselParameters","handleFieldChange","event","target","name","value","htmlFor","id","onChange","min","max","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a6102c1.chunk.js","sourcesContent":["import React, { useState, useCallback } from 'react';\n\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[],\n  step: number,\n  frameSize: number,\n  itemWidth: number,\n  animationDuration: number,\n  infinite: boolean,\n};\n\nexport const Carousel: React.FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  infinite,\n}) => {\n  const amount = images.length;\n\n  const [rotatedImages, setRotatedImages] = useState([...images]);\n\n  let startIndex = +rotatedImages[0].replace(/\\D/g, '') - 1;\n  let endIndex = startIndex + frameSize - 1;\n\n  const isFirstImage = !infinite\n    ? startIndex === 0\n    : false;\n\n  const isLastImage = !infinite\n    ? endIndex === amount - 1\n    : false;\n\n  const handleNextClick = () => {\n    setRotatedImages((currentImages) => {\n      startIndex = +currentImages[0].replace(/\\D/g, '') - 1;\n      endIndex = startIndex + frameSize - 1;\n\n      if (endIndex + step >= amount && !infinite) {\n        return [\n          ...currentImages.slice(amount - endIndex - 1, amount),\n          ...currentImages.slice(0, amount - endIndex - 1),\n        ];\n      }\n\n      return [\n        ...currentImages.slice(step, amount),\n        ...currentImages.slice(0, step),\n      ];\n    });\n  };\n\n  let timeoutId = 0;\n\n  const startCarousel = useCallback(() => {\n    timeoutId = window.setTimeout(function animation() {\n      handleNextClick();\n      timeoutId = window.setTimeout(animation, animationDuration);\n\n      if (endIndex + step >= amount && !infinite) {\n        clearTimeout(timeoutId);\n      }\n    }, animationDuration);\n  }, []);\n\n  const handlePrevClick = () => {\n    setRotatedImages((currentImages) => {\n      if (startIndex - step <= 0 && !infinite) {\n        return [\n          ...currentImages.slice(amount - startIndex, amount),\n          ...currentImages.slice(0, amount - startIndex),\n        ];\n      }\n\n      return [\n        ...currentImages.slice(amount - step, amount),\n        ...currentImages.slice(0, amount - step),\n      ];\n    });\n  };\n\n  return (\n    <div className=\"Carousel\">\n      <ul className=\"Carousel__list\">\n        {rotatedImages.map((image, index) => {\n          const isShown = (index < frameSize);\n\n          return (\n            <li\n              key={image}\n              className=\"Carousel__item\"\n              style={{\n                display: isShown ? 'block' : 'none',\n              }}\n            >\n              <img\n                src={image}\n                alt={image}\n                width={itemWidth}\n              />\n            </li>\n          );\n        })}\n      </ul>\n\n      <div className=\"Carousel__move-buttons\">\n        <button\n          type=\"button\"\n          className=\"Carousel__button Carousel__button--prev\"\n          onClick={handlePrevClick}\n          disabled={isFirstImage}\n        >\n          &#8592;\n        </button>\n\n        <button\n          data-cy=\"next\"\n          type=\"button\"\n          className=\"Carousel__button Carousel__button--next\"\n          onClick={handleNextClick}\n          disabled={isLastImage}\n        >\n          &#8594;\n        </button>\n      </div>\n\n      <div className=\"Carousel__bottom\">\n        <button\n          type=\"button\"\n          className=\"Carousel__button Carousel__button--start\"\n          onClick={startCarousel}\n        >\n          Start Carousel\n        </button>\n      </div>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\n\nimport './App.scss';\nimport './services/reset.scss';\nimport { Carousel } from './components/Carousel';\nimport { CarouselParameters } from './types/CarouselParameters';\nimport { getNumbers } from './services/utils';\n\nconst defaultCarouselParameters: CarouselParameters = {\n  step: 3,\n  frameSize: 3,\n  itemWidth: 130,\n  animationDuration: 1000,\n};\n\nconst getImagesUrls = getNumbers(1, 10)\n  .map(n => `./img/${n}.png`);\n\nexport const App: React.FC = () => {\n  const [carouselParameters, setCarouselParameters] = (\n    useState<CarouselParameters>({ ...defaultCarouselParameters })\n  );\n\n  const images = getImagesUrls;\n  const isInfinite = false;\n\n  const handleFieldChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setCarouselParameters({\n      ...carouselParameters,\n      [event.target.name]: +event.target.value,\n    });\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 data-cy=\"title\">\n        {`Carousel with ${images.length} images`}\n      </h1>\n\n      <div className=\"App__inputs\">\n        <label htmlFor=\"itemId\">\n          Enter image width in px: &nbsp;&nbsp;\n          <input\n            id=\"itemId\"\n            name=\"itemWidth\"\n            type=\"number\"\n            value={carouselParameters.itemWidth}\n            onChange={handleFieldChange}\n          />\n        </label>\n\n        <label htmlFor=\"frameId\">\n          Enter number of images on page:&nbsp;&nbsp;\n          <input\n            id=\"frameId\"\n            name=\"frameSize\"\n            type=\"number\"\n            value={carouselParameters.frameSize}\n            min=\"1\"\n            max=\"10\"\n            onChange={handleFieldChange}\n          />\n        </label>\n\n        <label htmlFor=\"stepId\">\n          Enter number of images scrolled:&nbsp;&nbsp;\n          <input\n            id=\"stepId\"\n            name=\"step\"\n            type=\"number\"\n            value={carouselParameters.step}\n            min=\"1\"\n            max=\"10\"\n            onChange={handleFieldChange}\n          />\n        </label>\n\n        <label>\n          Enter animation duration time in ms:&nbsp;&nbsp;\n          <input\n            name=\"animationDuration\"\n            type=\"number\"\n            value={carouselParameters.animationDuration}\n            onChange={handleFieldChange}\n          />\n        </label>\n      </div>\n\n      <Carousel\n        images={images}\n        step={carouselParameters.step}\n        frameSize={carouselParameters.frameSize}\n        itemWidth={carouselParameters.itemWidth}\n        animationDuration={carouselParameters.animationDuration}\n        infinite={isInfinite}\n      />\n    </div>\n  );\n};\n","export const getNumbers = (from: number, to: number): number[] => {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}